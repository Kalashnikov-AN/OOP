// Автор: Калашников А.Н.
#include <iostream> // заголовочный файл с классами, функциями
//и переменными для организации ввода-вывода
#include "arrays.h" // заголовочный файл с функциями модуля
#include <string> // заголовочный файл для работы со строками
#include <time.h> // заголовочный файл стандартной библиотеки языка программирования C++,
//содержащий типы и функции для работы с датой и временем.
#include <cassert> // Заголовочный файл cassert определяет функцию assert,
//которая обычно используется в качестве стандартного инструмента отладки.
#include <vector> // Заголовочный файл для работы с вектором. Вектор представляет контейнер,
//который содержит коллекцию объектов одного типа.
// Контейнеры - шаблоны классов
#include <ctype.h> // Заголовочный файл для функции isdigit
using namespace std; // Позволяет использовать все имена из стандартного
//пространства имен (std) без необходимости добавления префикса std::
using namespace arrays; // Использование созданного в модуле пространства имён
using namespace templates; // Пространство имён с шаблонными функциями
int main(){
	// устанавливаем языковой стандарт для корректного отображения русского языка в консоли
	setlocale(LC_ALL, "ru-RU.UTF-8");
	string str; // строковая переменная для определения способа ввода данных
	string fname = "double_sum.txt"; // название файла
	string fname_int = "int_sum.txt"; // название файла
	size_t n; // количество элементов массива
	vector<double> vtest1{1,2,3,4,5};
	// проверяем результат функции vect_calc для тестового вектора
	assert(vect_calc(vtest1) == 55);
	vector<double> vtest2{0,1,1,2,-1};
	// проверяем результат функции vect_calc для тестового вектора
	assert(abs(vect_calc(vtest2)-7.000) < 0.000000001);
	vector<double> vtest3{0,0,0,0,0};
	// проверяем результат функции vect_calc для тестового вектора
	assert(abs(vect_calc(vtest3)) < 0.0000001);  
	cout << "Введите количество элементов массива: ";
	cin >> n;
	// выделяем память для массива из действительных чисел размером n
	double *arr = new double[n];
	// выделяем память для массива из действительных чисел размером n
	int *arr_int = new int[n];
	// Создаём вектор из действительных чисел размером n
	cout << "Заполнение случайными числами - введите y. Иначе - любой другой символ ";
	cin >> str;
	try{ // защищённая область кода
	if(str[0] == 'y'){   // если пользователь ввёл 'y'
		srand(time(nullptr)); // задаём начальную точку для создания ряда псевдослучайных чисел, используя функцию определения времени
		arr_input_random<double>(arr, n); // заполняем вектор случайными числами
		arr_input_random<int>(arr_int, n); // заполняем вектор случайными числами
	}
	else{ // если пользователь ввёл не 'y'
	arr_input<double>(arr, n); // заполняем массив вручную
	arr_input<int>(arr_int, n); // заполняем массив вручную
	}
	arr_output<double>(arr, n); // выводим массив на экран
	arr_output<int>(arr_int, n); // выводим массив на экран
	arr_input_file<double>(arr, n, fname); // вводим элементы массива в файл fname
	arr_input_file<int>(arr_int, n, fname_int); // вводим элементы массива в файл fname
	// выводим ответ
	cout << endl << "a1^2 + ... + a" << n << "^2 = " << arr_calc<double>(arr, n);
	cout << endl << "a1^2 + ... + a" << n << "^2 = " << arr_calc<int>(arr_int, n);
	double *arr_file; // массив для считывания элементов из файла
	int *arr_int_file; // массив для считывания элементов из файла
	n = count_n(fname); // считаем количество элементов в файле fname
	arr_file = arr_output_file<double>(fname, n); // заполняем массив n считанными элементами
	arr_int_file = arr_output_file<int>(fname_int, n); // заполняем массив n считанными элементами
	arr_output<double>(arr_file, n); // выводим массив на экран
	arr_output<int>(arr_int_file, n); // выводим массив на экран
	}
	catch(invalid_argument error){ // если поймали ошибку типа invalid_argument
		cout << error.what(); // выведем сообщение об ошибке на экран
	}
	catch(length_error error){ // если поймали ошибку типа length_error
		cout << error.what(); // выведем сообщение об ошибке на экран
	}
	return 0;
}
